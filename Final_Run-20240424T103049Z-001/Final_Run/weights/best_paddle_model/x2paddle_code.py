import paddle
import math
from x2paddle.op_mapper.pytorch2paddle import pytorch_custom_layer as x2paddle_nn

class ClassificationModel(paddle.nn.Layer):
    def __init__(self):
        super(ClassificationModel, self).__init__()
        self.conv2d0 = paddle.nn.Conv2D(stride=2, padding=1, out_channels=16, kernel_size=(3, 3), in_channels=3)
        self.silu0 = paddle.nn.Silu()
        self.conv2d1 = paddle.nn.Conv2D(stride=2, padding=1, out_channels=32, kernel_size=(3, 3), in_channels=16)
        self.silu1 = paddle.nn.Silu()
        self.conv2d2 = paddle.nn.Conv2D(out_channels=32, kernel_size=(1, 1), in_channels=32)
        self.silu2 = paddle.nn.Silu()
        self.conv2d3 = paddle.nn.Conv2D(padding=1, out_channels=16, kernel_size=(3, 3), in_channels=16)
        self.silu3 = paddle.nn.Silu()
        self.conv2d4 = paddle.nn.Conv2D(padding=1, out_channels=16, kernel_size=(3, 3), in_channels=16)
        self.silu4 = paddle.nn.Silu()
        self.conv2d5 = paddle.nn.Conv2D(out_channels=32, kernel_size=(1, 1), in_channels=48)
        self.silu5 = paddle.nn.Silu()
        self.conv2d6 = paddle.nn.Conv2D(stride=2, padding=1, out_channels=64, kernel_size=(3, 3), in_channels=32)
        self.silu6 = paddle.nn.Silu()
        self.conv2d7 = paddle.nn.Conv2D(out_channels=64, kernel_size=(1, 1), in_channels=64)
        self.silu7 = paddle.nn.Silu()
        self.conv2d8 = paddle.nn.Conv2D(padding=1, out_channels=32, kernel_size=(3, 3), in_channels=32)
        self.silu8 = paddle.nn.Silu()
        self.conv2d9 = paddle.nn.Conv2D(padding=1, out_channels=32, kernel_size=(3, 3), in_channels=32)
        self.silu9 = paddle.nn.Silu()
        self.conv2d10 = paddle.nn.Conv2D(padding=1, out_channels=32, kernel_size=(3, 3), in_channels=32)
        self.silu10 = paddle.nn.Silu()
        self.conv2d11 = paddle.nn.Conv2D(padding=1, out_channels=32, kernel_size=(3, 3), in_channels=32)
        self.silu11 = paddle.nn.Silu()
        self.conv2d12 = paddle.nn.Conv2D(out_channels=64, kernel_size=(1, 1), in_channels=128)
        self.silu12 = paddle.nn.Silu()
        self.conv2d13 = paddle.nn.Conv2D(stride=2, padding=1, out_channels=128, kernel_size=(3, 3), in_channels=64)
        self.silu13 = paddle.nn.Silu()
        self.conv2d14 = paddle.nn.Conv2D(out_channels=128, kernel_size=(1, 1), in_channels=128)
        self.silu14 = paddle.nn.Silu()
        self.conv2d15 = paddle.nn.Conv2D(padding=1, out_channels=64, kernel_size=(3, 3), in_channels=64)
        self.silu15 = paddle.nn.Silu()
        self.conv2d16 = paddle.nn.Conv2D(padding=1, out_channels=64, kernel_size=(3, 3), in_channels=64)
        self.silu16 = paddle.nn.Silu()
        self.conv2d17 = paddle.nn.Conv2D(padding=1, out_channels=64, kernel_size=(3, 3), in_channels=64)
        self.silu17 = paddle.nn.Silu()
        self.conv2d18 = paddle.nn.Conv2D(padding=1, out_channels=64, kernel_size=(3, 3), in_channels=64)
        self.silu18 = paddle.nn.Silu()
        self.conv2d19 = paddle.nn.Conv2D(out_channels=128, kernel_size=(1, 1), in_channels=256)
        self.silu19 = paddle.nn.Silu()
        self.conv2d20 = paddle.nn.Conv2D(stride=2, padding=1, out_channels=256, kernel_size=(3, 3), in_channels=128)
        self.silu20 = paddle.nn.Silu()
        self.conv2d21 = paddle.nn.Conv2D(out_channels=256, kernel_size=(1, 1), in_channels=256)
        self.silu21 = paddle.nn.Silu()
        self.conv2d22 = paddle.nn.Conv2D(padding=1, out_channels=128, kernel_size=(3, 3), in_channels=128)
        self.silu22 = paddle.nn.Silu()
        self.conv2d23 = paddle.nn.Conv2D(padding=1, out_channels=128, kernel_size=(3, 3), in_channels=128)
        self.silu23 = paddle.nn.Silu()
        self.conv2d24 = paddle.nn.Conv2D(out_channels=256, kernel_size=(1, 1), in_channels=384)
        self.silu24 = paddle.nn.Silu()
        self.conv2d25 = paddle.nn.Conv2D(out_channels=1280, kernel_size=(1, 1), in_channels=256)
        self.silu25 = paddle.nn.Silu()
        self.pool2d0 = paddle.nn.AdaptiveAvgPool2D(output_size=[1, 1])
        self.dropout0 = paddle.nn.Dropout(p=0.0)
        self.model_9_linear_weight = self.create_parameter(dtype='float32', shape=(4, 1280), default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.model_9_linear_bias = self.create_parameter(dtype='float32', shape=(4,), default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.softmax0 = paddle.nn.Softmax(axis=1)

    def forward(self, x0):
        x31 = self.conv2d0(x0)
        x32 = self.silu0(x31)
        x43 = self.conv2d1(x32)
        x44 = self.silu1(x43)
        x59 = self.conv2d2(x44)
        x60 = self.silu2(x59)
        x62 = paddle.split(x=x60, num_or_sections=2, axis=1)
        x63, x64 = x62
        x74 = self.conv2d3(x64)
        x75 = self.silu3(x74)
        x83 = self.conv2d4(x75)
        x84 = self.silu4(x83)
        x85 = x64 + x84
        x86 = [x63, x64, x85]
        x87 = paddle.concat(x=x86, axis=1)
        x95 = self.conv2d5(x87)
        x96 = self.silu5(x95)
        x107 = self.conv2d6(x96)
        x108 = self.silu6(x107)
        x125 = self.conv2d7(x108)
        x126 = self.silu7(x125)
        x128 = paddle.split(x=x126, num_or_sections=2, axis=1)
        x129, x130 = x128
        x140 = self.conv2d8(x130)
        x141 = self.silu8(x140)
        x149 = self.conv2d9(x141)
        x150 = self.silu9(x149)
        x151 = x130 + x150
        x161 = self.conv2d10(x151)
        x162 = self.silu10(x161)
        x170 = self.conv2d11(x162)
        x171 = self.silu11(x170)
        x172 = x151 + x171
        x173 = [x129, x130, x151, x172]
        x174 = paddle.concat(x=x173, axis=1)
        x182 = self.conv2d12(x174)
        x183 = self.silu12(x182)
        x194 = self.conv2d13(x183)
        x195 = self.silu13(x194)
        x212 = self.conv2d14(x195)
        x213 = self.silu14(x212)
        x215 = paddle.split(x=x213, num_or_sections=2, axis=1)
        x216, x217 = x215
        x227 = self.conv2d15(x217)
        x228 = self.silu15(x227)
        x236 = self.conv2d16(x228)
        x237 = self.silu16(x236)
        x238 = x217 + x237
        x248 = self.conv2d17(x238)
        x249 = self.silu17(x248)
        x257 = self.conv2d18(x249)
        x258 = self.silu18(x257)
        x259 = x238 + x258
        x260 = [x216, x217, x238, x259]
        x261 = paddle.concat(x=x260, axis=1)
        x269 = self.conv2d19(x261)
        x270 = self.silu19(x269)
        x281 = self.conv2d20(x270)
        x282 = self.silu20(x281)
        x297 = self.conv2d21(x282)
        x298 = self.silu21(x297)
        x300 = paddle.split(x=x298, num_or_sections=2, axis=1)
        x301, x302 = x300
        x312 = self.conv2d22(x302)
        x313 = self.silu22(x312)
        x321 = self.conv2d23(x313)
        x322 = self.silu23(x321)
        x323 = x302 + x322
        x324 = [x301, x302, x323]
        x325 = paddle.concat(x=x324, axis=1)
        x333 = self.conv2d24(x325)
        x334 = self.silu24(x333)
        x350 = self.conv2d25(x334)
        x351 = self.silu25(x350)
        x353 = self.pool2d0(x351)
        x354 = paddle.flatten(x=x353, start_axis=1)
        x355 = self.dropout0(x354)
        model_9_linear_weight = self.model_9_linear_weight
        x358 = paddle.matmul(x=x355, y=model_9_linear_weight, transpose_y=True)
        model_9_linear_bias = self.model_9_linear_bias
        x358 = paddle.add(x=x358, y=model_9_linear_bias)
        x359 = self.softmax0(x358)
        return x359

def main(x0):
    # There are 1 inputs.
    # x0: shape-[1, 3, 256, 256], type-float32.
    paddle.disable_static()
    params = paddle.load(r'/content/drive/MyDrive/runs/classify/Final_Run/weights/best_paddle_model/model.pdparams')
    model = ClassificationModel()
    model.set_dict(params, use_structured_name=True)
    model.eval()
    out = model(x0)
    return out
